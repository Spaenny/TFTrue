name: Build for Windows & Linux

on:
  push:
    branches: [ actions ]
    tags: [ "*.**" ]
  pull_request:
    branches: [ actions ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-windows:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2016

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Upload binaries to release
      if: github.event_name != 'pull_request'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: D:\a\TFTrue\TFTrue\build\Release\TFTrue.dll
        asset_name: TFTrue.dll
        tag: ${{ github.ref }}
        overwrite: true
    - name: switching from HTTPS to SSH
      run: git remote set-url origin ${{ secrets.ssh }}
    - name: check for changes
      run: git status
    - name: copy Binary
      run: cp ./TFTrue.dll ../release/TFTrue.dll -vf
    - name: stage changed files
      run: git add .
    - name: commit changed files
      run: git commit -m "New Windows build pushed"
    - name: fetch from public
      run: git fetch origin actions
    - name: push code to public
      run: git push origin HEAD:actions

  build-linux:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive
        
    - name: Get dependencies
      run: sudo apt-get install -y linux-libc-dev-i386-cross gcc-multilib g++-multilib

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Upload binaries to release
      if: github.event_name != 'pull_request'
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: /home/runner/work/TFTrue/TFTrue/build/TFTrue.so
        asset_name: TFTrue.so
        tag: ${{ github.ref }}
        overwrite: true
    - name: switching from HTTPS to SSH
      run: git remote set-url origin ${{ secrets.ssh }}
    - name: check for changes
      run: git status
    - name: copy Binary
      run: cp ./TFTrue.so ../release/TFTrue.so -vf
    - name: stage changed files
      run: git add .
    - name: commit changed files
      run: git commit -m "New Linux build pushed"
    - name: fetch from public
      run: git fetch origin actions
    - name: push code to public
      run: git push origin HEAD:actions
